## Install and Set Up kubectl 

curl.exe -LO "https://dl.k8s.io/release/v1.30.0/bin/windows/amd64/kubectl.exe"

## Download the kubectl checksum file:

curl.exe -LO "https://dl.k8s.io/v1.30.0/bin/windows/amd64/kubectl.exe.sha256"

## Validate the kubectl binary against the checksum file:

CertUtil -hashfile kubectl.exe SHA256
type kubectl.exe.sha256

## Using PowerShell to automate the verification using the -eq operator to get a True or False result:

 $(Get-FileHash -Algorithm SHA256 .\kubectl.exe).Hash -eq $(Get-Content .\kubectl.exe.sha256)

## Test to ensure the version of kubectl is the same as downloaded:

kubectl version --client
kubectl version --client --output=yaml

## Install on Windows using Chocolatey, Scoop, or winget
## choco

choco install kubernetes-cli

## scoop
scoop install kubectl

## winget
winget install -e --id Kubernetes.kubectl

## Test to ensure the version you installed is up-to-date:

kubectl version --client

## Navigate to your home directory:
# If you're using cmd.exe, run: cd %USERPROFILE%

cd ~

## Create the .kube directory:

mkdir .kube

## Change to the .kube directory you just created:

cd .kube

## Configure kubectl to use a remote Kubernetes cluster:

New-Item config -type file

## In order for kubectl to find and access a Kubernetes cluster, it needs a kubeconfig file, which is created automatically when you create a cluster using kube-up.sh or successfully deploy a Minikube cluster. By default, kubectl configuration is located at 

~/.kube/config

## Check that kubectl is properly configured by getting the cluster state:

kubectl cluster-info

## If you see a message similar to the following, kubectl is not configured correctly or is not able to connect to a Kubernetes cluster.
## If kubectl cluster-info returns the url response but you can't access your cluster, to check whether it is configured properly, use:

kubectl cluster-info dump


## The kubectl completion script for PowerShell can be generated with the command 

kubectl completion powershell

## To do so in all your shell sessions, add the following line to your $PROFILE file:

kubectl completion powershell | Out-String | Invoke-Expression

## To add the generated script to your $PROFILE file, run the following line in your powershell prompt:

kubectl completion powershell >> $PROFILE

## Install kubectl convert plugin

curl.exe -LO "https://dl.k8s.io/release/v1.30.0/bin/windows/amd64/kubectl-convert.exe"

## Download the kubectl-convert checksum file:

curl.exe -LO "https://dl.k8s.io/v1.30.0/bin/windows/amd64/kubectl-convert.exe.sha256"

## Validate the kubectl-convert binary against the checksum file:
## Using Command Prompt to manually compare CertUtil's output to the checksum file downloaded:

CertUtil -hashfile kubectl-convert.exe SHA256
type kubectl-convert.exe.sha256

## Using PowerShell to automate the verification using the -eq operator to get a True or False result:

$($(CertUtil -hashfile .\kubectl-convert.exe SHA256)[1] -replace " ", "") -eq $(type .\kubectl-convert.exe.sha256)

## Append or prepend the kubectl-convert binary folder to your PATH environment variable.
## Verify the plugin is successfully installed.

kubectl convert --help


